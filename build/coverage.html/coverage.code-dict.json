{"/home/travis/build/npmtest/node-npmtest-grunt-update-json/test.js":"/* istanbul instrument in package npmtest_grunt_update_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-update-json/lib.npmtest_grunt_update_json.js":"/* istanbul instrument in package npmtest_grunt_update_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_update_json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_update_json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-update-json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-update-json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_update_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_update_json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_update_json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_update_json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_update_json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_update_json.__dirname + '/lib.npmtest_grunt_update_json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-update-json/node_modules/grunt-update-json/Gruntfile.js":"/*\n * grunt-update-json\n * https://github.com/apizsa/grunt-update-json\n *\n * Copyright (c) 2013 \n * Licensed under the MIT license.\n */\n\n\nmodule.exports = function(grunt) {\n  'use strict';\n\n  // Project configuration.\n  grunt.initConfig({\n    watch: {\n      default: {\n        files: [\n          \"Gruntfile.js\",\n          \"test/*.js\",\n          \"test/fixture/**/*.*\",\n          \"tasks/**\"\n        ],\n        tasks: [\"default\"]\n      }\n    },\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= mochacov.options.files.all %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      }\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['<%= copy.tests.files.0.dest %>']\n    },\n\n    // Copy the \n    copy: {\n      tests: {\n        files: [{\n          expand: true,\n          cwd: 'test/fixture/json',\n          src: ['*.dest.json'],\n          dest: '.tmp'\n        }]\n      }\n    },\n\n    // Unit tests with coverage.\n    mochacov: {\n      unit: {\n        options: {\n          reporter: 'spec'\n        }\n      },\n      coverage: {\n        options: {\n          reporter: 'mocha-term-cov-reporter',\n          coverage: true\n        }\n      },\n      options: {\n        files: 'test/*_test.js',\n        ui: 'bdd',\n        colors: true\n      }\n    }\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  require('load-grunt-tasks')(grunt);\n\n  // Whenever the 'test' task is run, first clean the 'tmp' dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', ['clean', 'copy', 'mochacov']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-update-json/node_modules/grunt-update-json/tasks/update_json_task.js":"/*\n * grunt-update-json\n * https://github.com/andreaspizsa/grunt-update-json\n *\n * Copyright (c) 2013 \n * Licensed under the MIT license.\n */\n'use strict';\n\nvar _ = require('lodash'),\n  updateJSON = require('./lib/update_json'),\n  defaultOptions = require('./lib/default_options');\n\nmodule.exports = function(grunt){\n  var register = grunt.registerMultiTask,\n    task = function(){\n      updateJSON(grunt, this.files, this.data.fields, this.options());\n    };\n\n  // handle the degenerate case\n  if(!grunt.config.data[updateJSON.taskName]){\n    register = grunt.registerTask;\n    task = function(target){\n      // use default options\n      var targets = target ? _.pick(defaultOptions, target) : defaultOptions;\n      _.each(targets, function(obj, key){\n        updateJSON(grunt, obj.files, obj.fields);\n      });\n    };\n  }\n  register(updateJSON.taskName, updateJSON.taskDescription, task);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-update-json/node_modules/grunt-update-json/tasks/lib/update_json.js":"/*\n * grunt-update-json\n * https://github.com/andreaspizsa/grunt-update-json\n *\n * Copyright (c) 2013 \n * Licensed under the MIT license.\n */\n'use strict';\n\nvar _ = require('lodash'),\n  pointer = require('json-pointer'),\n  // avoid the lint demons\n  jsonPath = require('JSONPath')[\"eval\".slice()],\n  stringify = require('json-stable-stringify');\n\n\nvar re = {\n  PATH_POINT: /^(\\\\)?((\\$\\.|\\/)?.*)/,\n  DELIM: /\\s*,\\s*/,\n  RENAME: /^(.*?)\\s*>\\s*(.*?)$/\n};\n\nvar taskName = 'update_json',\n  taskDescription = 'Update JSON files with data from other JSON files';\n\n\n// Parse a fieldspec, like [\"field\", \"to<from\", {\"to\": \"from\"}]\nfunction mergeField(memo, key){\n  var result = {},\n    match;\n\n  if(_.isPlainObject(key)){\n    result = key;\n  }else if(_.isString(key) && (match = key.match(re.RENAME))){\n    result[match[2]] = match[1];\n  }else{\n    result[key] = null;\n  }\n\n  return _.merge(memo, result);\n}\n\n\n// factory for a reduce function, bound to the input, that can get\n// the value out of the input\nfunction expandField(input, grunt){\n  var get = pointer(input);\n\n  return function(memo, fin, fout){\n    if(_.isString(fin)){\n      var match = fin.match(re.PATH_POINT);\n      // matched  ...with a `$.`       ...but not with a `\\`\n      if(match && match[3] === '$.' && !match[1]){\n        // field name, starts with an unescaped `$`, treat as JSON Path\n        memo[fout] = jsonPath(input, match[2]);\n      }else if(match && match[3] === '/' && !match[1]){\n        // field name, treat as a JSON pointer\n        memo[fout] = get(match[2]);\n      }else{\n        memo[fout] = input[match[2]];\n      }\n    }else if(_.isFunction(fin)){\n      // call a function\n      memo[fout] = fin(input);\n    }else if(_.isArray(fin)){\n      // pick out the values\n      memo[fout] = _.map(fin, function(value){\n        return expandField(input)({}, value, \"dummy\")[\"dummy\"];\n      });\n    }else if(_.isObject(fin)){\n      // build up an object of something else\n      memo[fout] = _.reduce(fin, expandField(input, grunt), {});\n    }else if(_.isNull(fin)){\n      // copy the value\n      memo[fout] = input[fout];\n    }else{\n      grunt.fail.warn('Could not map `' + JSON.stringify(fin) + '` to `' + \n        JSON.stringify(fout) + '`');\n    }\n    return memo;\n  };\n}\n\n\nfunction normalizeFields(fields){\n  // put fields in canonical (key-value object) form\n  // first, break up a single string, if found\n  if(_.isString(fields)){\n    fields = fields.split(re.DELIM);\n  }\n\n  // then, turn an array of fieldspecs:\n  //  [\"field\", \"from>to\", {\"from\": \"to\"}]\n  if(_.isArray(fields)){\n    fields = _.reduce(fields, mergeField, {});\n  }\n\n  return fields;\n}\n\n\nfunction updateJSON(grunt, files, fields, options){\n  fields = normalizeFields(fields);\n  options = options || {};\n  files.forEach(function(file){\n    var src = file.src;\n    if(!src || _.isEmpty(src)){\n      src = options.src;\n      if(!src || _.isEmpty(src = grunt.file.expand(src))){\n        grunt.fail.warn('No data found from which to update.');\n      }\n    }\n\n    // load the current output, if it exists\n    var output = grunt.file.exists(file.dest) ?\n        grunt.file.readJSON(file.dest) : {},\n      // build up a union object of src files\n      input = src.reduce(function(data, src){\n          return _.merge(data, grunt.file.readJSON(src));\n        }, {});\n    var copied = _.reduce(fields, expandField(input, grunt), {}),\n      jsonStr;\n\n    // if sorting was requested\n    if (options.sort) {\n      // do stringify of the passed object with sort\n      jsonStr = stringify(_.merge(output, copied), { space: options.indent });\n    } else {\n      // do stringify only\n      jsonStr = JSON.stringify(_.merge(output, copied), null, options.indent);\n    }\n    grunt.file.write(file.dest, jsonStr + '\\n');\n  });\n}\n\nupdateJSON.taskName = taskName;\nupdateJSON.taskDescription = taskDescription;\n\nmodule.exports = exports = updateJSON;\n","/home/travis/build/npmtest/node-npmtest-grunt-update-json/node_modules/grunt-update-json/tasks/lib/default_options.js":"/*\n * grunt-update-json\n * https://github.com/andreaspizsa/grunt-update-json\n *\n * Copyright (c) 2013\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = {\n  bower: {\n    files: [{\n      src: ['package.json'],\n      dest: 'bower.json'\n    }],\n    fields: [\n      'name', 'version', 'description', 'keywords', 'homepage', 'dependencies', 'license'\n    ]\n  },\n  component: {\n    files: [{\n      src: ['package.json'],\n      dest: 'component.json'\n    }],\n    fields:[\n      'name', 'version', 'description', 'keywords', 'repository > repo', 'license'\n    ]\n  }\n};\n"}